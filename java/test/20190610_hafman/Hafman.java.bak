import java.util.Scanner;
public class Hafman {
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		//受け取るデータ形式
		//半角文字列
		//例: ajjfdy@asncf.dj,d
		System.out.print("対象文字列: ");
		String line = sc.nextLine();
		System.out.println("line: " + line);
		String sorted = Sort.strsort(line);
		System.out.println("sorted: " + sorted);
		StringBuilder uniqsb = new StringBuilder();
		uniqsb.append(sorted.charAt(0));
		for(int i=1;i < sorted.length();i++) {
			if(uniqsb.charAt(uniqsb.length() - 1) != sorted.charAt(i)) {
				uniqsb.append(sorted.charAt(i));
			}
		}
		String uniq = uniqsb.toString();
		int[] uniqnum = new int[uniq.length()];
		for(int i=0;i<uniqnum.length;i++) {uniqnum[i] = 0;}
		int tmp = 0;
		for(int i=0;i < sorted.length();i++) {
			//System.out.println("start: tmp,uniq i,sorted : " + tmp + "," + uniq.charAt(tmp) + " " + i + "," + sorted.charAt(i));
			if(uniq.charAt(tmp) != sorted.charAt(i)) {
				tmp++;
				uniqnum[tmp]++;
			} else {
				uniqnum[tmp]++;
			}
		}
		//print
		System.out.println("uniq   : " + uniq);
		System.out.print("uniqnum: ");
		for(int i=0;i<uniqnum.length;i++) {
			System.out.print(uniqnum[i]);
		}
		System.out.println();


		//test num sort
		//System.out.print("input 数字列を入力: ");
		//String line2 = sc.nextLine();
		//int[] integers = new int[line2.length()];
		//for(int i=0;i<line2.length();i++) {
		//	integers[i] = Integer.parseInt(line2.substring(i,i+1));
		//}
		//int[] sortedintegers = Sort.intsort(integers);
		//for(int i=0;i < sortedintegers.length;i++) {
		//	System.out.print(sortedintegers[i]);
		//}
		//System.out.println();

		//uniqnum の大きい順にuniq を並び替え、uniqnumもその順に並び替え
		//->uniqsort,uniqnumsort
		int[] uniqnumsort = Sort.intsort(uniqnum);
		for(int i=0;i < uniqnumsort.length;i++) {
			System.out.print(uniqnumsort[i]);
		}
		System.out.println();

		//hafman tree creation
		StringBuilder hafman = new StringBuilder();
		
		

	}
}

//heap sort
class Sort {
	public static int[] intsort(int[] org) {
		return intsortrec(org,0);
	}
	private static int[] intsortrec(int[] org, int count) {
		//System.out.print("org,count: ");
		//printarray(org);
		//System.out.println("," + count);
		if(org.length <= 1) {
			return org;
		} else {
			int mid = org.length/2;
			//System.out.println("mid : " + org[mid]);
			int leftnum=0;
			int rightnum=0;
			for(int k=0;k<mid;k++) {
				if(org[k] < org[mid]) {
					leftnum++;
				} else {
					rightnum++;
				}
			}
			for(int k=mid+1;k<org.length;k++) {
				if(org[k] < org[mid]) {
					leftnum++;
				} else {
					rightnum++;
				}
			}
			int[] left = new int[leftnum];
			int[] right = new int[rightnum];
			
			int leftidx = 0;
			int rightidx = 0;
			for(int k=0;k<mid;k++) {
				if(org[k] < org[mid]) {
					left[leftidx] = org[k];
					leftidx++;
				} else {
					right[rightidx] = org[k];
					rightidx++;
				}
				//System.out.println("lidx.ridx: " + leftidx + "," + rightidx);
				//System.out.print("left: ");
				//printarray(left);
				//System.out.print("right: ");
				//printarray(right);
			}
			for(int k=mid+1;k<org.length;k++) {
				if(org[k] < org[mid]) {
					left[leftidx] = org[k];
					leftidx++;
				} else {
					right[rightidx] = org[k];
					rightidx++;
				}
				//System.out.println("lidx.ridx: " + leftidx + "," + rightidx);
				//System.out.print("left: ");
				//printarray(left);
				//System.out.print("right: ");
				//printarray(right);
			}
			int[] result = new int[org.length];

			count++;
			int[] leftsorted = intsortrec(left,count);
			int[] rightsorted = intsortrec(right,count);
			if(leftidx != 0 && rightidx != 0) {
				for(int i=0;i<leftsorted.length;i++) {
					result[i] = leftsorted[i];
				}
				result[leftsorted.length] = org[mid];
				for(int i=0;i<rightsorted.length;i++) {
					result[leftsorted.length + 1 + i] = rightsorted[i];
				}
			} else if(leftidx == 0) {
				result[0] = org[mid];
				for(int i=0;i<rightsorted.length;i++) {
					result[1 + i] = rightsorted[i];
				}
			} else if(rightidx == 0) {
				for(int i=0;i<leftsorted.length;i++) {
					result[i] = leftsorted[i];
				}
				result[leftsorted.length] = org[mid];
			}

			//return
			//System.out.println();
			//System.out.print("leftsorted: ");printarray(leftsorted);
			//System.out.print("rightsorted: ");printarray(rightsorted);
			//System.out.print("result: ");printarray(result);
			return result;
		}
	}

	public static String strsort(String org) {
		return strsortrec(org,0);
	}
	private static String strsortrec(String org,int count) {
		//System.out.println("sortrec start org: " + org);
		if(org.length() <= 1 ) {
			//System.out.println("sortrec return " + org);
			return org;
		} else {
			int mid = org.length()/2;
			//System.out.println("mid: " + org.charAt(mid));
			StringBuilder left = new StringBuilder();
			StringBuilder right = new StringBuilder();
			for(int k=0;k<mid;k++) {
				if(org.charAt(k) < org.charAt(mid)) {
					left.append(org.substring(k,k+1));
				} else if(org.charAt(k) >= org.charAt(mid)) {
					right.append(org.substring(k,k+1));
				}
			}
			for(int k=mid+1;k<org.length();k++) {
				if(org.charAt(k) < org.charAt(mid)) {
					left.append(org.substring(k,k+1));
				} else if(org.charAt(k) >= org.charAt(mid)) {
					right.append(org.substring(k,k+1));
				}
			}
			String result = strsortrec(left.toString(),count+1) + org.substring(mid,mid+1) + strsortrec(right.toString(),count+1);
			//System.out.println("sortrec return " + result);
			return result;
		}
	}

	private static void printarray(int[] ar) {
		for(int i=0;i<ar.length;i++) {
			System.out.print(ar[i]);
		}
		System.out.println();
	}
}
